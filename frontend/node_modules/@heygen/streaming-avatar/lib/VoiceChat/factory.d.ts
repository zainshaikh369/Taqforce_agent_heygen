import { LivekitVoiceChat, LivekitVoiceChatConfig } from './LiveKitVoiceChat';
import { WebSocketVoiceChat, WebSocketVoiceChatConfig } from './WebSocketVoiceChat';
import { AbstractVoiceChat, VoiceChatConfig } from './base';
export declare enum VoiceChatTransport {
    LIVEKIT = "livekit",
    WEBSOCKET = "websocket"
}
interface VoiceChatClassMap {
    [VoiceChatTransport.LIVEKIT]: LivekitVoiceChat;
    [VoiceChatTransport.WEBSOCKET]: WebSocketVoiceChat;
}
interface VoiceChatInitialConfig<T extends VoiceChatTransport> {
    voiceChatInstance: VoiceChatClassMap[T];
    initialConfig: Omit<Parameters<VoiceChatClassMap[T]['startVoiceChat']>[0], 'config'>;
}
export declare class VoiceChatFactory extends AbstractVoiceChat<VoiceChatConfig> {
    private voiceChat;
    private initialConfig;
    constructor({ voiceChatInstance, initialConfig }: VoiceChatInitialConfig<VoiceChatTransport>);
    get isMuted(): boolean;
    get isVoiceChatting(): boolean;
    startVoiceChat({ config }: VoiceChatConfig): Promise<void>;
    stopVoiceChat(): Promise<void>;
    mute(): void;
    unmute(): void;
    static createLiveKitVoiceChat(voiceChatConfig: LivekitVoiceChatConfig): VoiceChatFactory;
    static createWebSocketVoiceChat(voiceChatConfig: WebSocketVoiceChatConfig): VoiceChatFactory;
}
export {};
