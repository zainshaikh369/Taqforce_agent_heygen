export declare enum VoiceChatState {
    INACTIVE = "inactive",
    STARTING = "starting",
    ACTIVE = "started",
    STOPPING = "stopping"
}
export interface VoiceChatConfig {
    config?: {
        defaultMuted?: boolean;
    };
}
export declare abstract class AbstractVoiceChat<T extends VoiceChatConfig = VoiceChatConfig> {
    abstract get isMuted(): boolean;
    abstract get isVoiceChatting(): boolean;
    abstract startVoiceChat(config: T): Promise<void>;
    abstract stopVoiceChat(): Promise<void>;
    abstract mute(): void;
    abstract unmute(): void;
}
export declare abstract class AbstractVoiceChatImplementation<T extends VoiceChatConfig = VoiceChatConfig> extends AbstractVoiceChat<T> {
    private _isMuted;
    protected state: VoiceChatState;
    get isMuted(): boolean;
    get isVoiceChatting(): boolean;
    protected abstract _startVoiceChat(voiceChatConfig: T): Promise<void>;
    protected abstract _stopVoiceChat(): Promise<void>;
    startVoiceChat(voiceChatConfig: T): Promise<void>;
    stopVoiceChat(): Promise<void>;
    protected _mute(): void;
    protected _unmute(): void;
    mute(): void;
    unmute(): void;
}
